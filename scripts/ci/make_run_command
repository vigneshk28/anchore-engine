#!/usr/bin/env bash

# Fail on any errors, including in pipelines
set -eo pipefail

display_usage() {
    print_colorized WARN "usage: make < recipe_name >"
}

main() {
    # load all libraries from the 'scripts/ci/make' directory.
    for f in "$(cd "$(dirname ${BASH_SOURCE[0]})" && pwd)"/make/*; do
        . "$f"
    done

    # Setup shell colors for print statements
    # ${OK}=green, ${WARN}=yellow, ${INFO}=cyan, ${ERROR}=red, ${NORMAL}=normal
    setup_colors

    # Check for valid input arguments
    if [[ "$#" -eq 0 ]]; then
        print_colorized ERROR "ERROR - script requires input" >&2
        display_usage
        exit 1
    elif [[ "$1" =~ (help|-h) ]]; then
        display_usage
    # Check is the COMMAND var is a valid function or executable script
    elif declare -f "$1" &> /dev/null || [[ -x "$1" ]]; then
        # Trap all signals that cause script to exit & run trap_command function before exiting
        if [[ ! "${CI}" == true ]]; then
            trap 'trap_command' SIGINT SIGTERM ERR EXIT
        fi
        # Trap all bash commands & print to screen. Like using set -v but allows printing in color
        if [[ "${VERBOSE}" =~ (true|TRUE|y|Y|1) ]]; then
            set -o functrace
            trap 'printf "%s${INFO}+ $BASH_COMMAND${NORMAL}\n" >&2' DEBUG
        fi
        # Activate virtualenv if it exists
        if [[ -f "${VENV_ACTIVATE}" ]]; then
            . "${VENV_ACTIVATE}"
        fi

        # run function/script with all arguments passed
        "$@"
    else
        print_colorized ERROR "ERROR - ${COMMAND} is not a valid function or script name" >&2
        display_usage
        exit 1
    fi
}

main "$@"